import asyncio
import aiogram as aig
from aiogram import types
import logging

import os

from mysql import DataBaseQuery
import config
from menu import Menu


async def main():
    @dp.callback_query_handler(text='start')
    async def back_to_the_main_menu(call: types.CallbackQuery):
        await cmd_start(call.message)

    @dp.message_handler(lambda message: message.text == '< –Ω–∞–∑–∞–¥' or message.text == '/start')
    async def cmd_start(message: types.Message):

        """
        /start (—Å–æ–æ–±—â–µ–Ω–∏–µ —Å inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π)
        "< –Ω–∞–∑–∞–¥"
        –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É –ë–î
        :param message:
        """

        dbq = DataBaseQuery()
        dbq.insert_new_user_into_users(message.chat.id, str(message.chat.first_name), str(message.chat.last_name))

        text = 'üëã–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é!\n\n' \
               '–Ø —Å–æ–∑–¥–∞–Ω, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å —Ç–µ–±–µ —Å –∏–∑—É—á–µ–Ω–∏–µ–º\n' \
               '–ø—Ä–∞–≤–∏–ª —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.\n\n' \
               '–ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –º–æ–∏—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö —Ç—ã –º–æ–∂–µ—à—å —É–∑–Ω–∞—Ç—å\n' \
               '–≤ –º–µ–Ω—é "–ü–æ–¥—Ä–æ–±–Ω–µ–µ ..."'
        kb = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(text='–ü–æ–¥—Ä–æ–±–Ω–µ–µ...', callback_data='more'),
                   types.InlineKeyboardButton(text='üîé –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞', callback_data='rules'),
                   types.InlineKeyboardButton(text='‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ', callback_data='liked'),
                   types.InlineKeyboardButton(text='üí™ –¢—Ä–µ–Ω–∞–∂–µ—Ä', callback_data='train')]

        menu_ex = Menu(text, kb, buttons)
        await menu_ex.send_menu(message)

    # –¥–∞–ª–µ–µ –∏–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    @dp.callback_query_handler(text='more')
    async def more_menu(call: types.CallbackQuery):

        """
        –ö–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ..."
        :param call:
        """

        text = '<b>–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç <u>–≤—Å–µ</u> –ø—Ä–∞–≤–∏–ª–∞ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞.</b>\n' \
               '–ë–ª–∞–≥–æ–¥–∞—Ä—è –µ–º—É, –º–æ–∂–Ω–æ –ª–µ–≥–∫–æ –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –ø—Ä–∞–≤–∏–ª–æ, –Ω–∞–∂–∞–≤ –ø–∞—Ä—É –∫–Ω–æ–ø–æ–∫.\n\n' \
               '–í –º–µ–Ω—é "üîé –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞" —Å–æ–¥–µ—Ä–∂–∞—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞, –ø–æ–¥–µ–ª–µ–Ω–Ω—ã–µ –Ω–∞ —Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞ <b><u>(–æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è, ' \
               '–ø—É–Ω–∫—Ç—É–∞—Ü–∏—è, –æ—Ä—Ñ–æ—ç–ø–∏—è)</u></b>.\n\n' \
               '–í –º–µ–Ω—é "‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ" –±—É–¥—É—Ç —Ö—Ä–∞–Ω–∏—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–º–µ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å. \n\n' \
               '–í –º–µ–Ω—é "üí™ –¢—Ä–µ–Ω–∞–∂–µ—Ä" –ø—Ä–µ–¥–ª–æ–∂–µ–Ω—ã —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞, —á—Ç–æ–±—ã –∑–∞–∫—Ä–µ–ø–∏—Ç—å –∏–∑—É—á–µ–Ω–Ω–æ–µ\n' \
               '<b><u>(–≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤–∑—è—Ç—ã –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ï–ì–≠)</u></b>.\n\n' \
               'üòä –ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è!'

        kb = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(text='üëà –Ω–∞–∑–∞–¥', callback_data='start')]

        menu_ex = Menu(text, kb, buttons, parse_mode=types.ParseMode.HTML)
        await menu_ex.send_menu(call.message)

    @dp.callback_query_handler(text='rules')
    async def rules_menu(call: types.CallbackQuery):

        """
        –ö–Ω–æ–ø–∫–∞ "üîé –í—Å–µ –ø—Ä–∞–≤–∏–ª–∞"
        :param call:
        """

        text = '–í—Å–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–¥–µ–ª–µ–Ω—ã –Ω–∞ —Ç—Ä–∏ —Ä–∞–∑–¥–µ–ª–∞:\n\n' \
               '‚ñ´Ô∏è  <b><u>–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è</u></b>- –ø—Ä–∞–≤–æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–∑–Ω—ã—Ö —á–∞—Å—Ç–µ–π —Ä–µ—á–∏.\n\n' \
               '‚ñ´Ô∏è  <b><u>–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è</u></b> - –ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞–∫–æ–≤ –ø—Ä–∏–ø–∏–Ω–∞–Ω–∏—è.\n\n' \
               '‚ñ´Ô∏è  <b><u>–û—Ä—Ñ–æ—ç–ø–∏—è</u></b> - –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ —Å–ª–æ–≤.'

        kb = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(text='–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—è', callback_data='spelling'),
                   types.InlineKeyboardButton(text='–ü—É–Ω–∫—Ç—É–∞—Ü–∏—è', callback_data='punctuation'),
                   types.InlineKeyboardButton(text='–û—Ä—Ñ–æ—ç–ø–∏—è', callback_data='pronunciation'),
                   types.InlineKeyboardButton(text='üëà –Ω–∞–∑–∞–¥', callback_data='start')]

        menu_ex = Menu(text, kb, buttons, parse_mode=types.ParseMode.HTML)
        await menu_ex.send_menu(call.message)

    @dp.callback_query_handler(text='liked')
    async def liked_menu(call: types.CallbackQuery):

        """
        –ö–Ω–æ–ø–∫–∞ "‚ù§ –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"
        :param call:
        """

        text1 = '–ó–¥–µ—Å—å –Ω–∞—Ö–æ–¥—è—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–º–µ—Ç–∏–ª–∏.'
        text2 = '–ó–¥–µ—Å—å –±—É–¥—É—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø—Ä–∞–≤–∏–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –æ—Ç–º–µ—Ç–∏—Ç–µ.'

        dbq = DataBaseQuery()
        rules_ides = dbq.get_liked_rules_list(call.message.chat.id)

        if rules_ides is not None:
            menu_ex = Menu(text1, None, None)
            await menu_ex.send_rule_menu(rules_ides, call.message, 'start')
        else:
            kb = types.InlineKeyboardMarkup()
            buttons = [types.InlineKeyboardButton(text='üëà –Ω–∞–∑–∞–¥', callback_data='start')]

            menu_ex = Menu(text2, kb, buttons)
            await menu_ex.send_menu(call.message)

    @dp.callback_query_handler(text='train')
    async def train(call: types.CallbackQuery):

        """
        –ù–µ —Å–¥–µ–ª–∞–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞ "üí™ –¢—Ä–µ–Ω–∞–∂–µ—Ä"
        :param call:
        """

        await call.message.answer('–°–∫–æ—Ä–æ ...')

    # –¥–∞–ª–µ–µ –∏–¥—É—Ç –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Ä–∞–∑–¥–µ–ª–∞–º —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞
    @dp.callback_query_handler(text='spelling')
    async def show_spelling_rules(call: types.CallbackQuery):

        dbq = DataBaseQuery()
        rules_ides = dbq.get_rule_id_by_it_type(call.data)

        menu_ex = Menu('–ü—Ä–∞–≤–∏–ª–∞ –æ—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏–∏:', None, None)
        await menu_ex.send_rule_menu(rules_ides, call.message, 'rules')

    @dp.callback_query_handler(text='punctuation')
    async def show_punctuation_rules(call: types.CallbackQuery):
        dbq = DataBaseQuery()
        rules_ides = dbq.get_rule_id_by_it_type(call.data)

        menu_ex = Menu('–ü—Ä–∞–≤–∏–ª–∞ –ø—É–Ω–∫—Ç—É–∞—Ü–∏–∏:', None, None)
        await menu_ex.send_rule_menu(rules_ides, call.message, 'rules')

    @dp.callback_query_handler(text='pronunciation')
    async def show_pronunciation_rules(call: types.CallbackQuery):
        dbq = DataBaseQuery()
        rules_ides = dbq.get_rule_id_by_it_type(call.data)

        menu_ex = Menu('–ü—Ä–∞–≤–∏–ª–∞ –æ—Ä—Ñ–æ—ç–ø–∏–∏:', None, None)
        await menu_ex.send_rule_menu(rules_ides, call.message, 'rules')

    # –≤—ã–∑–æ–≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ ID
    @dp.callback_query_handler(lambda call: call.data in config.rules_ides)
    async def show_rule(call: types.CallbackQuery):

        """
        –ö–Ω–æ–ø–∫–∞ –ø—Ä–∞–≤–∏–ª–∞ (call.data == rule_id)
        :param call:
        """

        dbq = DataBaseQuery()

        rule_id = int(call.data)

        if dbq.has_user_already_ticked_the_rule(call.message.chat.id, rule_id):
            button_text = 'üóë'
            callback_data = 'delete' + call.data
        else:
            button_text = '‚ù§'
            callback_data = 'insert' + call.data

        kb = types.InlineKeyboardMarkup()
        buttons = [types.InlineKeyboardButton(text='üëà –Ω–∞–∑–∞–¥', callback_data=dbq.get_rule_type_by_it_id(rule_id)),
                   types.InlineKeyboardButton(text=button_text, callback_data=callback_data)]

        paths = dbq.get_rule_imges(rule_id)

        if paths is not None:
            photos = []
            for i in paths:
                photos.append(types.InputFile(os.getcwd() + i))

            menu_ex = Menu(dbq.read_rows_from_table('rules', 'id', rule_id)[0]['rule_text'], kb, buttons, photos=photos,
                           parse_mode=types.ParseMode.HTML)
            await menu_ex.send_menu(call.message, kb_included=False)
            await menu_ex.send_photos(call.message)
        else:
            menu_ex = Menu(dbq.read_rows_from_table('rules', 'id', rule_id)[0]['rule_text'], kb, buttons,
                           parse_mode=types.ParseMode.HTML)
            await menu_ex.send_menu(call.message)

    @dp.callback_query_handler(lambda call: call.data in config.rules_to_insert)
    async def insert_into_liked(call: types.CallbackQuery):

        """
        –í–Ω–µ—Å—Ç–∏ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ (–∫–Ω–æ–ø–∫–∞ "‚ù§")
        """

        rule_id = int(call.data[6:])
        print(rule_id, call.data)

        dbq = DataBaseQuery()

        if not dbq.has_user_already_ticked_the_rule(call.message.chat.id, rule_id):
            dbq.insert_rule_id_into_liked(call.message.chat.id, rule_id)
            await call.message.reply('–ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.\n'
                                     '–¢–µ–ø–µ—Ä—å –≤—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ —Ç–∞–º.')
        else:
            await call.message.reply('–ü—Ä–∞–≤–∏–ª–æ —É–∂–µ –µ—Å—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.')

    @dp.callback_query_handler(lambda call: call.data in config.rules_to_delete)
    async def delete_from_liked(call: types.CallbackQuery):

        """
        –£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ
        """

        rule_id = int(call.data[6:])

        dbq = DataBaseQuery()

        if dbq.has_user_already_ticked_the_rule(call.message.chat.id, rule_id):
            dbq.delete_rule_from_liked(call.message.chat.id, rule_id)
            await call.message.reply('–ü—Ä–∞–≤–∏–ª–æ —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ.')
        else:
            await call.message.reply('–í—ã –Ω–µ –¥–æ–±–∞–≤–ª—è–ª–∏ –ø—Ä–∞–≤–∏–ª–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.')

    await dp.skip_updates()
    await dp.start_polling()


if __name__ == "__main__":

    dbq = DataBaseQuery()
    dbq.renew_all_rules_ides_lists()

    logging.basicConfig(level=logging.INFO)

    bot = aig.Bot(token=config.token)
    dp = aig.Dispatcher(bot)

    asyncio.run(main())
